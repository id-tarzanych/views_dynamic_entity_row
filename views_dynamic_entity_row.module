<?php

/**
 * @file
 * Contains views_dynamic_entity_row.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\ContentEntityFormInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_help().
 */
function views_dynamic_entity_row_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {

    // Main module help for the views_dynamic_entity_row module.
    case 'help.page.views_dynamic_entity_row':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides a simple way to determine View Modes for each row') . '</p>';
      $output .= '<h3>' . t('Usage') . '</h3>';
      $output .= '<p>' . t('To use this module you should add Entity Reference field with View Mode as target entity type.') . '</p>';
      $output .= '<p>' . t('If no view mode was selected then default one will be selected.') . '</p>';
      return $output;

  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function views_dynamic_entity_row_entity_extra_field_info() {
  $fields = [];
  $settings = \Drupal::config('views_dynamic_entity_row.settings')
    ->get('entity_types');

  $entity_types = array_keys($settings);
  foreach ($entity_types as $entity_type_id) {
    if ($settings[$entity_type_id]['all']) {
      $bundles_info = \Drupal::service('entity_type.bundle.info')
        ->getBundleInfo($entity_type_id);
      $bundles = array_keys($bundles_info);
    }
    else {
      $bundles = $settings[$entity_type_id]['bundles'];
    }

    foreach ($bundles as $bundle) {
      $fields[$entity_type_id][$bundle]['form']['views_dynamic_display'] = array(
        'label' => t('Dynamic view mode'),
        'description' => t('Entity view mode that will be used by Dynamic Entity Row Views format'),
      );
    }
  }

  return $fields;
}

/**
 * Implements hook_form_alter().
 */
function views_dynamic_entity_row_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof ContentEntityFormInterface) {
    $component = $form_object
      ->getFormDisplay($form_state)
      ->getComponent('views_dynamic_display');

    if ($component && in_array($form_object->getOperation(), ['default', 'edit'])) {
      $entity = $form_object->getEntity();
      $entity_type_id = $entity->getEntityTypeId();

      $form['views_dynamic_display'] = [
        '#type' => 'select',
        '#title' => t('Dynamic View Mode'),
        '#empty_option' => t('- Not Selected -'),
        '#options' => \Drupal::service('entity_display.repository')->getViewModeOptions($entity_type_id),
        '#default_value' => \Drupal::service('views_dynamic_entity_row.manager')->getDynamicViewMode($entity),
        '#weight' => $component['weight'],
      ];

      foreach (Element::children($form['actions']) as $delta) {
        if (in_array('::save', $form['actions'][$delta]['#submit'])) {
          $form['actions'][$delta]['#submit'][] = 'views_dynamic_entity_row_set_mode_submit';
        }
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function views_dynamic_entity_row_entity_delete(EntityInterface $entity) {
  \Drupal::service('views_dynamic_entity_manager')->dropDynamicViewMode($entity);
}

/**
 * Submit handler setting entity view mode config for Dynamic Entity Row plugin.
 */
function views_dynamic_entity_row_set_mode_submit($form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  \Drupal::service('views_dynamic_entity_row.manager')
    ->setDynamicViewMode($entity, $form_state->getValue('views_dynamic_display'));
}
